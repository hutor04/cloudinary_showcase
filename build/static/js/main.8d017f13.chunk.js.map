{"version":3,"sources":["components/Settings.js","App.js","reportWebVitals.js","index.js"],"names":["Settings","props","action","gravityTypes","radiusTypes","zoomMarks","value","label","useState","width","height","dimensions","setDimensions","gravity","setGravity","zoom","setZoom","radius","setRadius","Container","maxWidth","Box","sx","my","Typography","component","variant","gutterBottom","Divider","mb","m","noValidate","autoComplete","TextField","id","defaultValue","onChange","event","val","newVal","parseInt","prevState","onWidthChange","target","onHeightChange","mt","FormControl","fullWidth","InputLabel","Select","labelId","map","x","MenuItem","toUpperCase","slice","toLowerCase","Slider","min","max","valueLabelFormat","findIndex","getAriaValueText","step","valueLabelDisplay","marks","isNaN","onRadiusChange","Stack","spacing","direction","Button","onClick","settings","App","imageSettings","setImageSettings","inputImage","setInputImage","match","exec","accountName","imageId","myImage","Cloudinary","cloud","cloudName","image","resize","thumbnail","roundCorners","byRadius","Grid","container","item","alignItems","justifyContent","cldImg","toURL","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d017f13.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport Container from '@mui/material/Container'\nimport Typography from '@mui/material/Typography'\nimport Box from '@mui/material/Box'\nimport Divider from '@mui/material/Divider'\nimport TextField from '@mui/material/TextField'\nimport Slider from '@mui/material/Slider'\nimport Button from '@mui/material/Button'\nimport Stack from '@mui/material/Stack'\nimport {FormControl, InputLabel, Select, MenuItem} from '@mui/material'\n\n\nconst Settings = (props) => {\n  const { action } = props\n  const gravityTypes = ['center', 'auto', 'north', 'west', 'south', 'east', 'face', 'faces']\n  const radiusTypes = [0, 25, 50, 100, 'max']\n  const zoomMarks = [\n    {\n      value: 0.2,\n      label: '0.2',\n    },\n    {\n      value: 0.5,\n      label: '0.5',\n    },\n    {\n      value: 0.8,\n      label: '0.8',\n    },\n    {\n      value: 1,\n      label: '1',\n    },\n    {\n      value: 1.2,\n      label: '1.2',\n    },\n    {\n      value: 1.5,\n      label: '1.5',\n    },\n    {\n      value: 2,\n      label: '2',\n    },\n  ];\n  const [dimensions, setDimensions] = useState({\n    width: 200,\n    height: 200,\n  })\n  const [gravity, setGravity] = useState(gravityTypes[0])\n  const [zoom, setZoom] = useState(1)\n  const [radius, setRadius] = useState(radiusTypes[0])\n\n  const onWidthChange = (val) => {\n    let newVal = parseInt(val)\n    setDimensions((prevState) => {\n      return {\n        ...prevState,\n        width: newVal\n      }\n    })\n  }\n\n  const onHeightChange = (val) => {\n    let newVal = parseInt(val)\n    setDimensions((prevState) => {\n      return {\n        ...prevState,\n        height: newVal\n      }\n    })\n  }\n\n  const onGravityChange = (val) => {\n    setGravity(val)\n  }\n\n  const onRadiusChange = (val) => {\n    let newVal = (isNaN(val)) ? val : parseInt(val)\n    setRadius(newVal)\n  }\n\n  const onConfirm = () => {\n    let settings = {\n      ...dimensions,\n      zoom: zoom,\n      gravity: gravity,\n      radius: radius\n    }\n    action(settings)\n  }\n\n  const valuetext = (val) => {\n    return `${val}`;\n  }\n\n  const valueLabelFormat = (val) => {\n    return zoomMarks.findIndex((x) => x.value === val) + 1;\n  }\n\n  return(\n    <Container maxWidth=\"sm\">\n      <Box sx={{ my: 4 }}>\n        <Typography component=\"h2\" variant={'h4'} gutterBottom>\n          Settings\n        </Typography>\n        <Divider sx={{mb: 2}}>Dimensions</Divider>\n        <Box\n          component=\"form\"\n          sx={{\n            '& > :not(style)': { m: 1, width: '25ch' },\n          }}\n          noValidate\n          autoComplete=\"off\"\n        >\n          <div>\n\n          </div>\n          <TextField\n            id=\"outlined-number\"\n            label=\"Width\"\n            defaultValue=\"Default Value\"\n            value={dimensions.width}\n            onChange={(event) => onWidthChange(event.target.value)}\n          />\n          <TextField\n            id=\"outlined-number\"\n            label=\"Height\"\n            defaultValue=\"Default Value\"\n            value={dimensions.height}\n            onChange={(event) => onHeightChange(event.target.value)}\n          />\n        </Box>\n        <Divider sx={{ mt: 4, mb:2 }}>Gravity</Divider>\n        <FormControl fullWidth>\n          <InputLabel id=\"demo-simple-select-label\">Gravity</InputLabel>\n          <Select\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={gravity}\n            label=\"Gravity\"\n            onChange={(event) => onGravityChange(event.target.value)}\n          >\n            {\n              gravityTypes.map((x) => {\n                return <MenuItem key={x} value={x}>{x[0].toUpperCase() + x.slice(1).toLowerCase()}</MenuItem>\n              })\n            }\n          </Select>\n        </FormControl>\n        <Divider sx={{ mt: 4, mb: 4}}>Zoom</Divider>\n        <Box>\n          <Slider\n            aria-label=\"Restricted values\"\n            defaultValue={1}\n            min={0.2}\n            max={2}\n            valueLabelFormat={valueLabelFormat}\n            getAriaValueText={valuetext}\n            step={null}\n            valueLabelDisplay=\"auto\"\n            marks={zoomMarks}\n            value={zoom}\n            onChange={(event) => setZoom(event.target.value)}\n          />\n        </Box>\n        <Divider sx={{ mt: 4, mb:2 }}>Radius</Divider>\n        <FormControl fullWidth>\n          <InputLabel id=\"demo-simple-select-label\">Radius</InputLabel>\n          <Select\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={radius}\n            label=\"Gravity\"\n            onChange={(event) => onRadiusChange(event.target.value)}\n          >\n            {radiusTypes.map((x) => <MenuItem key={x} value={x}>{x}</MenuItem>)}\n          </Select>\n        </FormControl>\n        <Stack spacing={2} direction=\"row\">\n          <Button sx={{ mt: 4}} variant=\"contained\" onClick={onConfirm}>Confirm</Button>\n        </Stack>\n      </Box>\n    </Container>\n  )\n}\n\nexport default Settings","import React, {useState} from 'react'\nimport Box from '@mui/material/Box'\nimport Grid from '@mui/material/Grid'\nimport Container from '@mui/material/Container'\nimport TextField from '@mui/material/TextField'\nimport Settings from './components/Settings'\nimport {Cloudinary} from '@cloudinary/url-gen'\nimport {AdvancedImage} from '@cloudinary/react'\nimport {fill, scale, thumbnail} from '@cloudinary/url-gen/actions/resize'\nimport {byRadius} from '@cloudinary/url-gen/actions/roundCorners'\nimport Typography from \"@mui/material/Typography\";\nimport {Divider} from \"@mui/material\";\n\n\nfunction App() {\n\n  const [imageSettings, setImageSettings] = useState({\n    width: 200,\n    height: 200,\n    radius: 0,\n    gravity: 'center',\n    zoom: 1\n  })\n  const [inputImage, setInputImage] = useState('https://res.cloudinary.com/dipmnmohl/image/upload/v1619610667/woman_zaij6u.jpg')\n\n  const pattern = /https:\\/\\/res\\.cloudinary\\.com\\/(.*)\\/.*\\/.*\\/.*\\/(.*)/\n  let match = pattern.exec(inputImage)\n  let accountName = match[1]\n  let imageId = match[2]\n\n  let cld = new Cloudinary({\n    cloud: {\n      cloudName: accountName\n    }\n  });\n\n  let myImage = cld.image(imageId)\n  myImage.resize(thumbnail().width(imageSettings.width).height(imageSettings.height).gravity(imageSettings.gravity).zoom(imageSettings.zoom))\n    .roundCorners(byRadius(imageSettings.radius))\n\n\n  const onImageUrlChange = (val) => {\n    setInputImage(val)\n  }\n\n  const handleSettingsChange = (val) => {\n    setImageSettings({\n      ...val\n    })\n  }\n\n  return (\n    <Container maxWidth={'xl'}>\n      <Grid container spacing={2} direction={'row'}>\n        <Grid item>\n          <Settings action={handleSettingsChange}/>\n        </Grid>\n        <Grid item>\n          <Box sx={{mt: 4}}>\n            <Typography component=\"h2\" variant={'h4'} gutterBottom>\n              Image\n            </Typography>\n            <Divider sx={{mb: 2}}>Original URL</Divider>\n          </Box>\n          <Box\n            component=\"form\"\n            sx={{\n              '& > :not(style)': {m: 1, width: '100ch'},\n            }}\n            noValidate\n            autoComplete=\"off\"\n          >\n            <TextField\n              id=\"outlined-basic\"\n              label={'URL in'}\n              variant=\"outlined\"\n              value={inputImage}\n              onChange={(event) => onImageUrlChange(event.target.value)}\n            />\n          </Box>\n          <Grid\n            container\n            sx={{ width: 915, height: 800, direction: 'row', alignItems: 'center', justifyContent: 'center' }}\n          >\n            <Grid item>\n              <AdvancedImage cldImg={myImage}/>\n            </Grid>\n          </Grid>\n          <Box\n            component=\"form\"\n            sx={{\n              '& > :not(style)': {m: 1, width: '100ch'},\n            }}\n            noValidate\n            autoComplete=\"off\"\n          >\n            <TextField\n              id=\"outlined-basic\"\n              label={'URL out'}\n              variant=\"outlined\"\n              value={myImage.toURL()}\n            />\n          </Box>\n        </Grid>\n      </Grid>\n    </Container>\n\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}